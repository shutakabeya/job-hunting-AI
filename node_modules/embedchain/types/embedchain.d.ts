import type { Collection } from 'chromadb';
import type { QueryResponse } from 'chromadb/dist/main/types';
import type { BaseChunker } from './chunkers';
import type { BaseLoader } from './loaders';
import type { DataType, FormattedResult, Input, LocalInput, Metadata, Method, RemoteInput } from './models';
import type { BaseVectorDB } from './vectordb/BaseVectorDb';
declare class EmbedChain {
    dbClient: any;
    collection: Collection;
    userAsks: [DataType, Input][];
    initApp: Promise<void>;
    collectMetrics: boolean;
    sId: string;
    constructor(db?: BaseVectorDB, collectMetrics?: boolean);
    setupChroma(): Promise<void>;
    setupOther(db: BaseVectorDB): Promise<void>;
    static getLoader(dataType: DataType): BaseLoader;
    static getChunker(dataType: DataType): BaseChunker;
    add(dataType: DataType, url: RemoteInput): Promise<void>;
    addLocal(dataType: DataType, content: LocalInput): Promise<void>;
    protected loadAndEmbed(loader: any, chunker: BaseChunker, src: Input): Promise<{
        documents: string[];
        metadatas: Metadata[];
        ids: string[];
        countNewChunks: number;
    }>;
    static formatResult(results: QueryResponse): Promise<FormattedResult[]>;
    static getOpenAiAnswer(prompt: string): Promise<string>;
    protected retrieveFromDatabase(inputQuery: string): Promise<string>;
    static generatePrompt(inputQuery: string, context: any): string;
    static getAnswerFromLlm(prompt: string): Promise<string>;
    query(inputQuery: string): Promise<string>;
    dryRun(input_query: string): Promise<string>;
    /**
     * Count the number of embeddings.
     * @returns {Promise<number>}: The number of embeddings.
     */
    count(): Promise<number>;
    protected sendTelemetryEvent(method: Method, extraMetadata?: object): Promise<void>;
}
declare class EmbedChainApp extends EmbedChain {
}
export { EmbedChainApp };
