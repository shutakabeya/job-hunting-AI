"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChromaDB = void 0;
const chromadb_1 = require("chromadb");
const BaseVectorDb_1 = require("./BaseVectorDb");
const embedder = new chromadb_1.OpenAIEmbeddingFunction({
    openai_api_key: (_a = process.env.OPENAI_API_KEY) !== null && _a !== void 0 ? _a : '',
});
class ChromaDB extends BaseVectorDb_1.BaseVectorDB {
    // eslint-disable-next-line @typescript-eslint/no-useless-constructor
    constructor() {
        super();
        this.collection = null;
    }
    getClientAndCollection() {
        return __awaiter(this, void 0, void 0, function* () {
            this.client = new chromadb_1.ChromaClient({ path: 'http://localhost:8000' });
            try {
                this.collection = yield this.client.getCollection({
                    name: 'embedchain_store',
                    embeddingFunction: embedder,
                });
            }
            catch (err) {
                if (!this.collection) {
                    this.collection = yield this.client.createCollection({
                        name: 'embedchain_store',
                        embeddingFunction: embedder,
                    });
                }
            }
        });
    }
}
exports.ChromaDB = ChromaDB;
//# sourceMappingURL=ChromaDb.js.map