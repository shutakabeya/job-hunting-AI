"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseChunker = void 0;
const crypto_1 = require("crypto");
class BaseChunker {
    constructor(textSplitter) {
        this.textSplitter = textSplitter;
    }
    createChunks(loader, url) {
        return __awaiter(this, void 0, void 0, function* () {
            const documents = [];
            const ids = [];
            const datas = yield loader.loadData(url);
            const metadatas = [];
            const dataPromises = datas.map((data) => __awaiter(this, void 0, void 0, function* () {
                const { content, metaData } = data;
                const chunks = yield this.textSplitter.splitText(content);
                chunks.forEach((chunk) => {
                    const chunkId = (0, crypto_1.createHash)('sha256')
                        .update(chunk + metaData.url)
                        .digest('hex');
                    ids.push(chunkId);
                    documents.push(chunk);
                    metadatas.push(metaData);
                });
            }));
            yield Promise.all(dataPromises);
            return {
                documents,
                ids,
                metadatas,
            };
        });
    }
}
exports.BaseChunker = BaseChunker;
//# sourceMappingURL=BaseChunker.js.map