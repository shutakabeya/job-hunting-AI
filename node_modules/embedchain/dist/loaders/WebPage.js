"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebPageLoader = void 0;
const axios_1 = __importDefault(require("axios"));
const jsdom_1 = require("jsdom");
const utils_1 = require("../utils");
const BaseLoader_1 = require("./BaseLoader");
class WebPageLoader extends BaseLoader_1.BaseLoader {
    // eslint-disable-next-line class-methods-use-this
    loadData(url) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield axios_1.default.get(url);
            const html = response.data;
            const dom = new jsdom_1.JSDOM(html);
            const { document } = dom.window;
            const unwantedTags = [
                'nav',
                'aside',
                'form',
                'header',
                'noscript',
                'svg',
                'canvas',
                'footer',
                'script',
                'style',
            ];
            unwantedTags.forEach((tagName) => {
                const elements = document.getElementsByTagName(tagName);
                Array.from(elements).forEach((element) => {
                    // eslint-disable-next-line no-param-reassign
                    element.textContent = ' ';
                });
            });
            const output = [];
            let content = document.body.textContent;
            if (!content) {
                throw new Error('Web page content is empty.');
            }
            content = (0, utils_1.cleanString)(content);
            const metaData = {
                url,
            };
            output.push({
                content,
                metaData,
            });
            return output;
        });
    }
}
exports.WebPageLoader = WebPageLoader;
//# sourceMappingURL=WebPage.js.map