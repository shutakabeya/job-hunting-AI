"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PdfFileLoader = void 0;
const utils_1 = require("../utils");
const BaseLoader_1 = require("./BaseLoader");
const pdfjsLib = require('pdfjs-dist');
class PdfFileLoader extends BaseLoader_1.BaseLoader {
    static getPagesFromPdf(url) {
        return __awaiter(this, void 0, void 0, function* () {
            const loadingTask = pdfjsLib.getDocument(url);
            const pdf = yield loadingTask.promise;
            const { numPages } = pdf;
            const promises = Array.from({ length: numPages }, (_, i) => __awaiter(this, void 0, void 0, function* () {
                const page = yield pdf.getPage(i + 1);
                const pageText = yield page.getTextContent();
                const pageContent = pageText.items
                    .map((item) => ('str' in item ? item.str : ''))
                    .join(' ');
                return {
                    page_content: pageContent,
                };
            }));
            return Promise.all(promises);
        });
    }
    // eslint-disable-next-line class-methods-use-this
    loadData(url) {
        return __awaiter(this, void 0, void 0, function* () {
            const pages = yield PdfFileLoader.getPagesFromPdf(url);
            const output = [];
            if (!pages.length) {
                throw new Error('No data found');
            }
            pages.forEach((page) => {
                let content = page.page_content;
                content = (0, utils_1.cleanString)(content);
                const metaData = {
                    url,
                };
                output.push({
                    content,
                    metaData,
                });
            });
            return output;
        });
    }
}
exports.PdfFileLoader = PdfFileLoader;
//# sourceMappingURL=PdfFile.js.map