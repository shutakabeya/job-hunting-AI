import chalk from 'chalk';

import { EntityMemory } from '../memory/entity/entity_memory';
import { LongTermMemory } from '../memory/long_term/long_term_memory';
import { ShortTermMemory } from '../memory/short_term/short_term_memory';
import { TaskOutputStorageHandler } from '../utilities/task_output_storage_handler';

interface ResetMemoriesOptions {
  long?: boolean;
  short?: boolean;
  entity?: boolean;
  kickoffOutputs?: boolean;
  all?: boolean;
}

function resetMemoriesCommand(options: ResetMemoriesOptions) {
  const { long, short, entity, kickoffOutputs, all } = options;

  try {
    if (all) {
      ShortTermMemory.reset();
      EntityMemory.reset();
      LongTermMemory.reset();
      TaskOutputStorageHandler.reset();
      console.log(chalk.green("All memories have been reset."));
    } else {
      if (long) {
        LongTermMemory.reset();
        console.log(chalk.green("Long term memory has been reset."));
      }
      if (short) {
        ShortTermMemory.reset();
        console.log(chalk.green("Short term memory has been reset."));
      }
      if (entity) {
        EntityMemory.reset();
        console.log(chalk.green("Entity memory has been reset."));
      }
      if (kickoffOutputs) {
        TaskOutputStorageHandler.reset();
        console.log(chalk.green("Latest Kickoff outputs stored has been reset."));
      }
    }
  } catch (error) {
    console.error(chalk.red(`An error occurred while resetting the memories: ${error.message}`));
    if (error.output) {
      console.error(chalk.red(error.output));
    }
  }
}

export { resetMemoriesCommand, ResetMemoriesOptions };