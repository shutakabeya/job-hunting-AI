import path from 'path';
import fs from 'fs/promises';
import chalk from 'chalk';
import { copyTemplate } from './utils';

async function createCrew(name, parentFolder = null) {
  const folderName = name.replace(/[ -]/g, '_').toLowerCase();
  const className = name.replace(/[_-]/g, ' ').replace(/\b\w/g, l => l.toUpperCase()).replace(/\s+/g, '');

  const folderPath = parentFolder ? path.join(parentFolder, folderName) : folderName;

  console.log(chalk.green.bold(`Creating ${parentFolder ? 'crew' : 'folder'} ${folderName}...`));

  try {
    await fs.mkdir(folderPath, { recursive: true });
    await fs.mkdir(path.join(folderPath, 'tests'), { recursive: true });

    if (!parentFolder) {
      await fs.mkdir(path.join(folderPath, 'src', folderName, 'tools'), { recursive: true });
      await fs.mkdir(path.join(folderPath, 'src', folderName, 'config'), { recursive: true });
      await fs.writeFile(path.join(folderPath, '.env'), 'OPENAI_API_KEY=YOUR_API_KEY');
    }
  } catch (error) {
    if (error.code === 'EEXIST') {
      console.log(chalk.red(`\tFolder ${folderName} already exists. Please choose a different name.`));
      return;
    }
    throw error;
  }

  const packageDir = path.dirname(__filename);
  const templatesDir = path.join(packageDir, 'templates', 'crew');

  const rootTemplateFiles = parentFolder ? [] : ['.gitignore', 'package.json', 'README.md'];
  const toolsTemplateFiles = ['tools/custom_tool.js', 'tools/index.js'];
  const configTemplateFiles = ['config/agents.yaml', 'config/tasks.yaml'];
  const srcTemplateFiles = parentFolder ? ['crew.js'] : ['index.js', 'main.js', 'crew.js'];

  for (const fileName of rootTemplateFiles) {
    const srcFile = path.join(templatesDir, fileName);
    const dstFile = path.join(folderPath, fileName);
    await copyTemplate(srcFile, dstFile, name, className, folderName);
  }

  const srcFolder = parentFolder ? folderPath : path.join(folderPath, 'src', folderName);

  for (const fileName of srcTemplateFiles) {
    const srcFile = path.join(templatesDir, fileName);
    const dstFile = path.join(srcFolder, fileName);
    await copyTemplate(srcFile, dstFile, name, className, folderName);
  }

  if (!parentFolder) {
    for (const fileName of [...toolsTemplateFiles, ...configTemplateFiles]) {
      const srcFile = path.join(templatesDir, fileName);
      const dstFile = path.join(srcFolder, fileName);
      await copyTemplate(srcFile, dstFile, name, className, folderName);
    }
  }

  console.log(chalk.green.bold(`Crew ${name} created successfully!`));
}

export { createCrew };