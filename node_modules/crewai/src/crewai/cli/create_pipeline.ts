import path from 'path';
import fs from 'fs/promises';
import chalk from 'chalk';
import { copyTemplate } from './utils';

async function createPipeline(name, router = false) {
  const folderName = name.replace(/[ -]/g, '_').toLowerCase();
  const className = name.replace(/[_-]/g, ' ').replace(/\b\w/g, l => l.toUpperCase()).replace(/\s+/g, '');

  console.log(chalk.green.bold(`Creating pipeline ${folderName}...`));

  const projectRoot = path.join(process.cwd(), folderName);

  try {
    await fs.access(projectRoot);
    console.log(chalk.red(`Error: Folder ${folderName} already exists.`));
    return;
  } catch (error) {
    // Folder doesn't exist, continue with creation
  }

  // Create directory structure
  await fs.mkdir(path.join(projectRoot, 'src', folderName, 'pipelines'), { recursive: true });
  await fs.mkdir(path.join(projectRoot, 'src', folderName, 'crews'), { recursive: true });
  await fs.mkdir(path.join(projectRoot, 'src', folderName, 'tools'), { recursive: true });
  await fs.mkdir(path.join(projectRoot, 'tests'), { recursive: true });

  // Create .env file
  await fs.writeFile(path.join(projectRoot, '.env'), 'OPENAI_API_KEY=YOUR_API_KEY');

  const packageDir = path.dirname(__filename);
  const templateFolder = router ? 'pipeline_router' : 'pipeline';
  const templatesDir = path.join(packageDir, 'templates', templateFolder);

  const rootTemplateFiles = ['.gitignore', 'package.json', 'README.md'];
  const srcTemplateFiles = ['index.js', 'main.js'];
  const toolsTemplateFiles = ['tools/index.js', 'tools/custom_tool.js'];

  const crewFolders = router
    ? ['classifier_crew', 'normal_crew', 'urgent_crew']
    : ['research_crew', 'write_linkedin_crew', 'write_x_crew'];

  const pipelinesFolders = router
    ? ['pipelines/index.js', 'pipelines/pipeline_classifier.js', 'pipelines/pipeline_normal.js', 'pipelines/pipeline_urgent.js']
    : ['pipelines/index.js', 'pipelines/pipeline.js'];

  // Copy and process root template files
  for (const fileName of rootTemplateFiles) {
    const srcFile = path.join(templatesDir, fileName);
    const dstFile = path.join(projectRoot, fileName);
    await copyTemplate(srcFile, dstFile, name, className, folderName);
  }

  // Copy and process src template files
  for (const fileName of srcTemplateFiles) {
    const srcFile = path.join(templatesDir, fileName);
    const dstFile = path.join(projectRoot, 'src', folderName, fileName);
    await copyTemplate(srcFile, dstFile, name, className, folderName);
  }

  // Copy tools files
  for (const fileName of toolsTemplateFiles) {
    const srcFile = path.join(templatesDir, fileName);
    const dstFile = path.join(projectRoot, 'src', folderName, fileName);
    await fs.copyFile(srcFile, dstFile);
  }

  // Copy pipelines folders
  for (const fileName of pipelinesFolders) {
    const srcFile = path.join(templatesDir, fileName);
    const dstFile = path.join(projectRoot, 'src', folderName, fileName);
    await copyTemplate(srcFile, dstFile, name, className, folderName);
  }

  // Copy crew folders
  for (const crewFolder of crewFolders) {
    const srcCrewFolder = path.join(templatesDir, 'crews', crewFolder);
    const dstCrewFolder = path.join(projectRoot, 'src', folderName, 'crews', crewFolder);
    try {
      await fs.access(srcCrewFolder);
      await fs.mkdir(dstCrewFolder, { recursive: true });
      const files = await fs.readdir(srcCrewFolder);
      for (const file of files) {
        const srcFile = path.join(srcCrewFolder, file);
        const dstFile = path.join(dstCrewFolder, file);
        await fs.copyFile(srcFile, dstFile);
      }
    } catch (error) {
      console.log(chalk.yellow(`Warning: Crew folder ${crewFolder} not found in template.`));
    }
  }

  console.log(chalk.green.bold(`Pipeline ${name} created successfully!`));
}

export { createPipeline };