import fs from 'fs/promises';
import path from 'path';
import chalk from 'chalk';

async function copyTemplate(srcFile, dstFile, name, className, folderName) {
  try {
    const content = await fs.readFile(srcFile, 'utf-8');
    const processedContent = content
      .replace(/{{name}}/g, name)
      .replace(/{{crew_name}}/g, className)
      .replace(/{{folder_name}}/g, folderName)
      .replace(/{{pipeline_name}}/g, className);
    await fs.writeFile(dstFile, processedContent);
    console.log(chalk.green(`  - Created ${path.relative(process.cwd(), dstFile)}`));
  } catch (error) {
    console.error(chalk.red(`Error copying template: ${error.message}`));
  }
}

function validatePositiveInteger(value, errorMessage) {
  const intValue = parseInt(value, 10);
  if (isNaN(intValue) || intValue <= 0) {
    throw new Error(errorMessage);
  }
  return intValue;
}

function spawnProcess(command, args) {
  const { spawn } = require('child_process');
  return new Promise((resolve, reject) => {
    const process = spawn(command, args, { stdio: 'inherit' });

    process.on('error', (error) => {
      console.error(chalk.red(`An error occurred: ${error.message}`));
      reject(error);
    });

    process.on('close', (code) => {
      if (code !== 0) {
        console.error(chalk.red(`Process exited with code ${code}`));
        reject(new Error(`Process exited with code ${code}`));
      } else {
        console.log(chalk.green('Process completed successfully.'));
        resolve();
      }
    });
  });
}

export {
  copyTemplate,
  validatePositiveInteger,
  spawnProcess
};