#!/usr/bin/env node

import { Command } from 'commander';
import { createCrew } from './create_crew';
import { createPipeline } from './create_pipeline';
import { trainCrew } from './train_crew';
import { resetMemoriesCommand, ResetMemoriesOptions } from './reset_memories_command';
import { runCrew } from './run_crew';
import { replayTaskCommand } from './replay_from_task';

const program: Command = new Command();

interface CreateOptions {
  router?: boolean;
}

interface TrainOptions {
  n_iterations: string;
  filename: string;
}

program
  .command('create <type> <name>')
  .description('Create a new crew or pipeline')
  .option('--router', 'Create a pipeline with router functionality')
  .action((type: string, name: string, options: CreateOptions) => {
    if (type === 'crew') {
      createCrew(name);
    } else if (type === 'pipeline') {
      createPipeline(name, options.router);
    } else {
      console.error('Error: Invalid type. Must be "crew" or "pipeline".');
    }
  });

program
  .command('train')
  .description('Train the crew')
  .option('-n, --n_iterations <number>', 'Number of iterations to train the crew', '5')
  .option('-f, --filename <path>', 'Path to a custom file for training', 'trained_agents_data.json')
  .action((options: TrainOptions) => {
    console.log(`Training the Crew for ${options.n_iterations} iterations`);
    trainCrew(parseInt(options.n_iterations), options.filename);
  });

program
  .command('replay <task_id>')
  .description('Replay a task from the database')
  .action((taskId: string) => {
    replayTaskCommand(taskId);
  });

program
  .command('reset-memories')
  .description('Reset the memories of the crew')
  .option('-l, --long', 'Reset long-term memory')
  .option('-s, --short', 'Reset short-term memory')
  .option('-e, --entity', 'Reset entity memory')
  .option('-k, --kickoff-outputs', 'Reset latest kickoff task outputs')
  .option('-a, --all', 'Reset all memories')
  .action((options: ResetMemoriesOptions) => {
    resetMemoriesCommand(options);
  });

program
  .command('run')
  .description('Run the crew')
  .action(() => {
    console.log('Running the crew');
    runCrew();
  });

program.parse(process.argv);