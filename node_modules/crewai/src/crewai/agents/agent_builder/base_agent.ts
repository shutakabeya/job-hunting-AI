import { v4 as uuidv4 } from 'uuid';
import { BaseAgentTool } from './base_agent_tool';
import { BaseTokenProcess } from './base_token_process';
import { BaseOutputConverter } from './base_output_converter';
import { BaseAgentExecutorMixin } from './base_agent_executor_mixin';

class BaseAgent extends BaseTokenProcess {
    constructor(name, role, goal, backstory, verbose = false, allowDelegation = false) {
        super();
        this.id = uuidv4();
        this.name = name;
        this.role = role;
        this.goal = goal;
        this.backstory = backstory;
        this.verbose = verbose;
        this.allowDelegation = allowDelegation;
        this.tools = [];
        this.outputConverter = new BaseOutputConverter();
    }

    addTool(tool) {
        if (!(tool instanceof BaseAgentTool)) {
            throw new Error('Tool must be an instance of BaseAgentTool');
        }
        this.tools.push(tool);
    }

    setOutputConverter(converter) {
        if (!(converter instanceof BaseOutputConverter)) {
            throw new Error('Converter must be an instance of BaseOutputConverter');
        }
        this.outputConverter = converter;
    }

    async execute(task, context = {}) {
        throw new Error('Not implemented');
    }

    async _run(inputs) {
        throw new Error('Not implemented');
    }

    async _arun(inputs) {
        throw new Error('Not implemented');
    }
}

Object.assign(BaseAgent.prototype, BaseAgentExecutorMixin);

export { BaseAgent };