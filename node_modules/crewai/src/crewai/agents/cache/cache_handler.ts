import fs from 'fs/promises';
import path from 'path';

class CacheHandler {
    constructor(cachePath = '.cache') {
        this.cachePath = cachePath;
    }

    async get(key) {
        try {
            const filePath = path.join(this.cachePath, `${key}.json`);
            const data = await fs.readFile(filePath, 'utf-8');
            return JSON.parse(data);
        } catch (error) {
            if (error.code === 'ENOENT') {
                return null;
            }
            throw error;
        }
    }

    async set(key, value) {
        const filePath = path.join(this.cachePath, `${key}.json`);
        await fs.mkdir(this.cachePath, { recursive: true });
        await fs.writeFile(filePath, JSON.stringify(value));
    }

    async clear() {
        try {
            await fs.rm(this.cachePath, { recursive: true, force: true });
        } catch (error) {
            if (error.code !== 'ENOENT') {
                throw error;
            }
        }
    }
}

export { CacheHandler };