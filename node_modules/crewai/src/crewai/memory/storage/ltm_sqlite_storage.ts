import sqlite3 from 'sqlite3'
import { open } from 'sqlite'
import { Printer } from '../../utilities/printer'
import { dbStoragePath } from '../../utilities/paths'


class LTMSQLiteStorage {
    constructor(dbPath = `${dbStoragePath()}/long_term_memory_storage.db`) {
        this.dbPath = dbPath
        this._printer = new Printer()
        this._initializeDb()
    }

    async _initializeDb() {
        try {
            const db = await open({
                filename: this.dbPath,
                driver: sqlite3.Database
            })

            await db.exec(`
                          CREATE TABLE IF NOT EXISTS long_term_memories(
                              id INTEGER PRIMARY KEY AUTOINCREMENT,
                              task_description TEXT,
                              metadata TEXT,
                              datetime TEXT,
                              score REAL
                          )
                          `)

            await db.close()
        } catch (e) {
            this._printer.print(
                `MEMORY ERROR: An error occurred during database initialization: ${e}`,
                'red'
            )
        }
    }

    async save(taskDescription, metadata, datetime, score) {
        try {
            const db = await open({
                filename: this.dbPath,
                driver: sqlite3.Database
            })

            await db.run(
                `INSERT INTO long_term_memories(task_description, metadata, datetime, score)
                VALUES(?, ?, ?, ?)`,
                [taskDescription, JSON.stringify(metadata), datetime, score]
            )

            await db.close()
        } catch (e) {
            this._printer.print(
                `MEMORY ERROR: An error occurred while saving to LTM: ${e}`,
                'red'
            )
        }
    }

    async load(taskDescription, latestN) {
        try {
            const db = await open({
                filename: this.dbPath,
                driver: sqlite3.Database
            })

            const rows = await db.all(
                `SELECT metadata, datetime, score
                FROM long_term_memories
                WHERE task_description=?
                ORDER BY datetime DESC, score ASC
                LIMIT ?`,
                [taskDescription, latestN]
            )

            await db.close()

            if (rows.length > 0) {
                return rows.map(row => ({
                    metadata: JSON.parse(row.metadata),
                    datetime: row.datetime,
                    score: row.score
                }))
            }

            return null
        } catch (e) {
            this._printer.print(
                `MEMORY ERROR: An error occurred while querying LTM: ${e}`,
                'red'
            )
            return null
        }
    }

    async reset() {
        try {
            const db = await open({
                filename: this.dbPath,
                driver: sqlite3.Database
            })

            await db.run('DELETE FROM long_term_memories')

            await db.close()
        } catch (e) {
            this._printer.print(
                `MEMORY ERROR: An error occurred while deleting all rows in LTM: ${e}`,
                'red'
            )
        }
    }
}


export { LTMSQLiteStorage }
