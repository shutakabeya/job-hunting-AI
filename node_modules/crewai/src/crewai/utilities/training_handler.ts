import fs from 'fs/promises'
import path from 'path'
import { v4 as uuidv4 } from 'uuid'


class TrainingHandler {
    constructor(filename = 'trained_agents_data.json') {
        this.filename = filename
        this.data = {}
    }

    async loadData() {
        try {
            const rawData = await fs.readFile(this.filename, 'utf-8')
            this.data = JSON.parse(rawData)
        } catch (error) {
            if (error.code === 'ENOENT') {
                console.log(`File ${this.filename} not found. Creating a new one.`)
                this.data = {}
            } else {
                throw error
            }
        }
    }

    async saveData() {
        await fs.writeFile(this.filename, JSON.stringify(this.data, null, 2))
    }

    async addTrainingData(agentName, trainingData) {
        if (!this.data[agentName]) {
            this.data[agentName] = []
        }
        const trainingId = uuidv4()
        this.data[agentName].push({ id: trainingId, ...trainingData })
        await this.saveData()
        return trainingId
    }

    async getTrainingData(agentName, trainingId = null) {
        if (!this.data[agentName]) {
            return null
        }
        if (trainingId) {
            return this.data[agentName].find(item => item.id == trainingId) || null
        }
        return this.data[agentName]
    }

    async updateTrainingData(agentName, trainingId, updatedData) {
        if (!this.data[agentName]) {
            return false
        }
        const index = this.data[agentName].findIndex(item => item.id == trainingId)
        if (index == -1) {
            return false
        }
        this.data[agentName][index] = { ...this.data[agentName][index], ...updatedData }
        await this.saveData()
        return true
    }

    async deleteTrainingData(agentName, trainingId) {
        if (!this.data[agentName]) {
            return false
        }
        const initialLength = this.data[agentName].length
        this.data[agentName] = this.data[agentName].filter(item => item.id != trainingId)
        if (this.data[agentName].length == initialLength) {
            return false
        }
        await this.saveData()
        return true
    }
}


export { TrainingHandler }
