import fs from 'fs/promises';
import path from 'path';

class I18N {
    constructor(promptFile = null) {
        this.promptFile = promptFile;
        this._prompts = {};
    }

    async loadPrompts() {
        try {
            if (this.promptFile) {
                const data = await fs.readFile(this.promptFile, 'utf8');
                this._prompts = JSON.parse(data);
            } else {
                const dirPath = path.dirname(__filename);
                const promptsPath = path.join(dirPath, '../translations/en.json');
                const data = await fs.readFile(promptsPath, 'utf8');
                this._prompts = JSON.parse(data);
            }
        } catch (error) {
            if (error.code === 'ENOENT') {
                throw new Error(`Prompt file '${this.promptFile}' not found.`);
            } else if (error instanceof SyntaxError) {
                throw new Error('Error decoding JSON from the prompts file.');
            }
            throw error;
        }

        if (!this._prompts) {
            this._prompts = {};
        }
    }

    slice(slice) {
        return this.retrieve('slices', slice);
    }

    errors(error) {
        return this.retrieve('errors', error);
    }

    tools(tool) {
        return this.retrieve('tools', tool);
    }

    retrieve(kind, key) {
        try {
            return this._prompts[kind][key];
        } catch (error) {
            throw new Error(`Prompt for '${kind}':'${key}' not found.`);
        }
    }
}

export { I18N };