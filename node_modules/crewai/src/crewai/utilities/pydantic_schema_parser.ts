import { z } from 'zod';

class PydanticSchemaParser {
    static parseSchema(schema) {
        if (typeof schema === 'object' && schema !== null) {
            if ('type' in schema) {
                switch (schema.type) {
                    case 'string':
                        return z.string();
                    case 'number':
                        return z.number();
                    case 'integer':
                        return z.number().int();
                    case 'boolean':
                        return z.boolean();
                    case 'array':
                        if (schema.items) {
                            return z.array(this.parseSchema(schema.items));
                        }
                        return z.array(z.any());
                    case 'object':
                        if (schema.properties) {
                            const shape = {};
                            for (const [key, value] of Object.entries(schema.properties)) {
                                shape[key] = this.parseSchema(value);
                            }
                            return z.object(shape);
                        }
                        return z.record(z.any());
                    default:
                        return z.any();
                }
            }
        }
        return z.any();
    }
}

export { PydanticSchemaParser };