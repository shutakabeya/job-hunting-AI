import { v4 as uuidv4 } from 'uuid';
import { PipelineBase } from './pipeline_base';
import { PipelineKickoffResult } from './pipeline_kickoff_result';
import { PipelineOutput } from './pipeline_output';

class Pipeline extends PipelineBase {
    constructor(name, description) {
        super();
        this.id = uuidv4();
        this.name = name;
        this.description = description;
        this.crews = [];
        this.tasks = [];
    }

    addCrew(crew) {
        this.crews.push(crew);
    }

    addTask(task) {
        this.tasks.push(task);
    }

    async kickoff(inputs = {}) {
        const kickoffResults = [];
        for (const task of this.tasks) {
            const result = await task.kickoff(inputs);
            kickoffResults.push(new PipelineKickoffResult(this.id, task.id, result));
        }
        return kickoffResults;
    }

    async execute(inputs = {}) {
        const outputs = [];
        for (const task of this.tasks) {
            const result = await task.execute(inputs);
            outputs.push(new PipelineOutput(this.id, task.id, result));
            inputs = { ...inputs, ...result };
        }
        return outputs;
    }
}

export { Pipeline };