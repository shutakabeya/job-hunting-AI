import { Task } from '../task';
import { OutputFormat } from './output_format';
import { TaskOutput } from './task_output';

class ConditionalTask extends Task {
    /**
     * A task that can be conditionally executed based on the output of another task.
     * Note: This cannot be the only task you have in your crew and cannot be the first since it needs context from the previous task.
     */

    constructor({ condition, ...kwargs }) {
        super(kwargs);
        this.condition = condition;
    }

    shouldExecute(context) {
        /**
         * Determines whether the conditional task should be executed based on the provided context.
         *
         * @param {TaskOutput} context - The context or output from the previous task that will be evaluated by the condition.
         * @returns {boolean} True if the task should be executed, False otherwise.
         */
        return this.condition(context);
    }

    getSkippedTaskOutput() {
        return new TaskOutput({
            description: this.description,
            raw: "",
            agent: this.agent ? this.agent.role : "",
            output_format: OutputFormat.RAW,
        });
    }
}

export { ConditionalTask };